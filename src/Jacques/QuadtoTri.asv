function [new_triangles,triangles] = QuadtoTri(element, numVertices, endcap, connection_flag)

num_nodes = length(element);
num_diff = 0;

if connection_flag
    p = length(element);
    
    for v = 1:num_vertices % There will be num_vertices extra points at first and last node
        % The elements at the start
        % 'p' is the last element (#elements)
        element(p+v, 1) = element(v,1);
        element(p+v, 2) = element(v,2);
        element(p+v, 3) = element(p,4) + v; % Add extra
        element(p+v, 4) = element(p,4) + v; % Degenerate coordinate
        
        % The elements at the end
        element(p+v+num_vertices, 1) = element(p-v+1,4);
        element(p+v+num_vertices, 2) = element(p-v+1,3);
        element(p+v+num_vertices, 3) = element(p,4) + 2; % Add extra
        element(p+v+num_vertices, 4) = element(p,4) + 2; % Degenerate coordinate
    end
    
    
end

if endcap == 1
    num_diff = (2*numVertices);
    num_nodes = num_nodes - num_diff; % Since the last elements are already triangles
    triangle3 = zeros(num_diff,3);
    
    for node = num_nodes+1:length(element)
        c1 = element(node,1);
        c2 = element(node,2);
        c3 = element(node,4);
        %         c4 = element(node,3);
        triangle3(node-num_nodes,1:3) = [c1 c2 c3];
        
    end
end
triangle1 = zeros(num_nodes,3);
triangle2 = zeros(num_nodes,3);

for node = 1:num_nodes
    % Define triangle corners
    c1 = element(node,1);
    c2 = element(node,2);
    c3 = element(node,4);
    c4 = element(node,3);
    triangle1(node,1:3) = [c1 c2 c3];
    triangle2(node,1:3) = [c2 c3 c4];
    if mod(node,numVertices-1) == 0
        triangle1(node,1:3) = [c2 c1 c3];
        triangle2(node,1:3) = [c3 c2 c4];
    end
end


triangles = zeros(length(triangle1)*2 + num_diff,3);
triangles(1:2:end-1-num_diff,1:3) = triangle1;
triangles(2:2:end-num_diff,1:3)   = triangle2;
if endcap == 1
    triangles(end-num_diff+1:end, 1:3) = triangle3;
end
new_triangles = triangles;


% We have to convert to format used by Robey:
% new_triangles = {};
% for node = 1:num_nodes*2
%     new_triangles = [new_triangles;triangles(node,1:3),[0 0 0 0 0 0]];
% end
